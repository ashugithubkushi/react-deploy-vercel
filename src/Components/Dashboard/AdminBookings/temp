// import React, { useEffect, useState } from "react";
// import "./adminbookings.css";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { Modal, ModalHeader, ModalBody, ModalFooter, Button } from "reactstrap";
// import axios from "axios";

// const AdminBookings = () => {
//   const [selectedVehicle, setSelectedVehicle] = useState("");
//   const [showSelectDate, setShowSelectDate] = useState(false);
//   const [selectedDate, setSelectedDate] = useState(null);
//   const [selectedSlot, setSelectedSlot] = useState(null);
//   const [error, setError] = useState(false);
//   const [villaNumber, setVillaNumber] = useState("");
//   const [vehicleNumber, setVehicleNumber] = useState("");
//   const [bookedBy, setBookedBy] = useState("");
//   const [formError, setFormError] = useState(false);
//   const [modal, setModal] = useState(false);
//   const [data, setData] = useState([]);





  

//   // const [bookedClicked, setBookedClicked] = useState(false);
//   const [bookedSlots, setBookedSlots] = useState([]);

//   const [vehicleNumbers, setVehicleNumbers] = useState([]);

//   const handleVehicleClick = (selectedVehicle) => {
//     setSelectedVehicle(selectedVehicle);
//     setShowSelectDate(true);
//   };

//   const toggleModal = () => setModal(!modal);

//   // const handleSelectSlot = (slot) => {
//   //   if (selectedDate) {
//   //     setSelectedSlot(slot);
//   //     toggleModal(); // Show modal
//   //     setError(false);
//   //   } else {
//   //     setError(true);
//   //     setTimeout(() => {
//   //       setError(false);
//   //     }, 2000);
//   //   }
//   // };

//   // const isSlotBooked = (slot, date) => {
//   //   return bookedSlots.some((item) => item.slot === slot && item.date === date);
//   // };
//   // const isSlotBooked = (slot, date) => {
//   //   return bookedSlots.some((item) => item.selectedSlot === slot && item.selectedDate === date);
//   // };
//   // const isSlotBooked = (slot, date) => {
//   //   return data.some((item) => {
//   //     // Ensure item.selectedDate is a Date object before calling getTime()
//   //     const itemDate = new Date(item.selectedDate);
//   //     return (
//   //       item.selectedVehicle === selectedVehicle && // Check for selected vehicle
//   //       item.selectedSlot === slot &&
//   //       itemDate.getTime() === date.getTime()
//   //     );
//   //   });
//   // };

//   // imp
//   // const handleSelectSlot = (slot) => {
//   //   if (selectedDate) {
//   //     // Check if the slot is already booked for the selected date
//   //     const slotAlreadyBooked = data.some(
//   //       (item) => {
//   //         // Ensure item.selectedDate is a Date object before calling getTime()
//   //         const itemDate = new Date(item.selectedDate);
//   //         return item.selectedSlot === slot && itemDate.getTime() === selectedDate.getTime();
//   //       }
//   //     );

//   //     if (slotAlreadyBooked) {
//   //       // If the slot is already booked for the selected date
//   //       setBookedClicked(true);
//   //       setTimeout(() => {
//   //         setBookedClicked(false);
//   //       }, 2000);
//   //     } else {
//   //       setSelectedSlot(slot);
//   //       toggleModal(); // Show modal
//   //       setError(false);
//   //     }
//   //   } else {
//   //     setError(true);
//   //     setTimeout(() => {
//   //       setError(false);
//   //     }, 2000);
//   //   }
//   // };

//   const handleSelectSlot = (slot) => {
//     if (selectedDate) {
//       setSelectedSlot(slot);
//       toggleModal(); // Show modal
//       setError(false);
//     } else {
//       setError(true);
//       setTimeout(() => {
//         setError(false);
//       }, 2000);
//     }
//   };

//   // const handleDateChange = (date) => {
//   //   // Convert selected date to IST
//   //   const selectedISTDate = new Date(date.getTime() + 5.5 * 60 * 60 * 1000);
//   //   setSelectedDate(selectedISTDate);
//   // };
//   // const handleDateChange = (date) => {
//   //   setSelectedDate(date);
//   //   setSelectedSlot(null);
//   const handleDateChange = (date) => {
//     setSelectedDate(date);
//     setSelectedSlot(null);
//     // Convert selected date to IST
//     const selectedISTDate = new Date(date.getTime() + 5.5 * 60 * 60 * 1000);
//     setSelectedDate(selectedISTDate);
//   };

//   const handleCancel = () => {
//     toggleModal();
//   };

//   const handlereset = () => {
//     setVillaNumber("");
//     setVehicleNumber("");
//     setBookedBy("");
//     setFormError("");
//   };

//   // const handleSubmit = (event) => {
//   //   event.preventDefault();
//   //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
//   //     setFormError(true);
//   //     return;
//   //   }
//   //   const data = {
//   //     selectedVehicle: selectedVehicle,
//   //     selectedDate: selectedDate,
//   //     selectedSlot: selectedSlot,
//   //     vehicleNumber: vehicleNumber,
//   //     villaNumber: villaNumber,
//   //     bookedBy: bookedBy,
//   //   };

//   //   axios
//   //     .post("http://localhost:3000/createSlots", data)
//   //     .then((response) => {
//   //       console.log(response.status);
//   //       console.log("Form data submitted successfully:", response.data);
//   //       alert("form submitted successfully");
//   //       setShowSelectDate(false);
//   //     })
//   //     .catch((error) => {
//   //       console.error("Error submitting form data:", error);
//   //     });

//   //   toggleModal();

//   //   setSelectedDate(null);
//   //   setSelectedSlot(null);
//   //   setSelectedVehicle("");
//   //   setVehicleNumber("");
//   //   setVillaNumber("");
//   //   setBookedBy("");
//   // };

//   // const handleSubmit = (event) => {
//   //   event.preventDefault();
//   //   const currentTime = new Date(); // Capture the current time
//   //   const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN"); // Format the current time as per IST
//   //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
//   //     setFormError(true);
//   //     return;
//   //   }
//   //   const data = {
//   //     selectedVehicle: selectedVehicle,
//   //     selectedDate: selectedDate,
//   //     selectedSlot: selectedSlot,
//   //     vehicleNumber: vehicleNumber,
//   //     villaNumber: villaNumber,
//   //     bookedBy: bookedBy,
//   //     submittedAt: formattedCurrentTime, // Add the current time to the data object
//   //   };

//   //   axios
//   //     .post("http://localhost:3000/createSlots", data)
//   //     .then((response) => {
//   //       console.log(response.status);
//   //       console.log("Form data submitted successfully:", response.data);
//   //       alert("form submitted successfully");
//   //       setShowSelectDate(false);
//   //     })
//   //     .catch((error) => {
//   //       console.error("Error submitting form data:", error);
//   //     });

//   //   toggleModal();

//   //   setSelectedDate(null);
//   //   setSelectedSlot(null);
//   //   setSelectedVehicle("");
//   //   setVehicleNumber("");
//   //   setVillaNumber("");
//   //   setBookedBy("");
//   // };

//   // vvimp
//   // const handleSubmit = (event) => {
//   //   event.preventDefault();
//   //   const currentTime = new Date();
//   //   const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN");
//   //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim() || !selectedVehicle) {
//   //     setFormError(true);
//   //     return;
//   //   }
//   //   const data = {
//   //     selectedVehicle: selectedVehicle,
//   //     selectedDate: selectedDate,
//   //     selectedSlot: selectedSlot,
//   //     vehicleNumber: vehicleNumber,
//   //     villaNumber: villaNumber,
//   //     bookedBy: bookedBy,
//   //     submittedAt: formattedCurrentTime,
//   //   };

//   //   axios
//   //     .post("http://localhost:3000/createSlots", data)
//   //     .then((response) => {
//   //       console.log(response.status);
//   //       console.log("Form data submitted successfully:", response.data);
//   //       alert("form submitted successfully");
//   //       setShowSelectDate(false);
//   //     })
//   //     .catch((error) => {
//   //       console.error("Error submitting form data:", error);
//   //     });

//   //   toggleModal();

//   //   setSelectedDate(null);
//   //   setSelectedSlot(null);
//   //   setSelectedVehicle(""); // Make sure to reset selectedVehicle here
//   //   setVehicleNumber("");
//   //   setVillaNumber("");
//   //   setBookedBy("");
//   // };

//   const handleSubmit = (event) => {
//     event.preventDefault();
//     const currentTime = new Date();
//     const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN");

//     // Check if any required field is empty
//     // if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim() || !selectedVehicle || !selectedDate || !selectedSlot) {
//     //   setFormError(true); // Set formError state to true if any required field is empty
//     //   return;
//     // }
//     if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
//       setFormError(true);
//       return;
//     }
//     const data = {
//       selectedVehicle: selectedVehicle,
//       selectedDate: selectedDate,
//       selectedSlot: selectedSlot,
//       vehicleNumber: vehicleNumber,
//       villaNumber: villaNumber,
//       bookedBy: bookedBy,
//       submittedAt: formattedCurrentTime,
//     };

//     axios
//       .post("http://localhost:3000/createSlots", data)
//       .then((response) => {
//         console.log(response.status);
//         console.log("Form data submitted successfully:", response.data);
//         alert("Form submitted successfully");
//         // setShowSelectDate(false);
//         console.log(data);
//         toggleModal();
//         setSelectedDate(null);
//         setSelectedSlot(null);
//         setSelectedVehicle("");
//         setVehicleNumber("");
//         setVillaNumber("");
//         setBookedBy("");
//       })
//       .catch((error) => {
//         console.error("Error submitting form data:", error);
//       });
//   };

//   useEffect(() => {
//     fetch("http://localhost:3000/getslots", {
//       method: "GET",
//       headers: {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       },
//     })
//       .then((res) => res.json())
//       .then((data) => {
//         // console.log(data, "userData");
//         setData(data.data);
//       });
//   }, []);

//   //vehiclenum
//   // useEffect(() => {
//   //   axios.get("http://localhost:3000/getVehicle").then((response) => {
//   //     const vehicleNumbers = response.data.map((vehicle) => vehicle.vehicleNum);
//   //     setVehicleNumbers(vehicleNumbers);
//   //   }).catch((error) => {
//   //     console.error("Error fetching vehicle numbers:", error);
//   //   });
//   // }, []);
//   useEffect(() => {
//     axios
//       .get("http://localhost:3000/vehicles") // Correct endpoint to fetch all vehicle numbers
//       .then((response) => {
//         const vehicleNumbers = response.data.map(
//           (vehicle) => vehicle.vehicleNum
//         );
//         setVehicleNumbers(vehicleNumbers);
//       })
//       .catch((error) => {
//         console.error("Error fetching vehicle numbers:", error);
//       });
//   }, []);

//   const handleVehicleNumberChange = (event) => {
//     setVehicleNumber(event.target.value);
//   };


//   return (
//     <div>
//       {!showSelectDate ? (
//         <div className="grid-container">
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Tractor")}
//             className="grid-item"
//           >
//             Tractor
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("JCB")}
//             className="grid-item"
//           >
//             JCB
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Concrete Mixer")}
//             className="grid-item"
//           >
//             Concrete Mixer
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Bulldozers")}
//             className="grid-item"
//           >
//             Bulldozers
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Cranes")}
//             className="grid-item"
//           >
//             Cranes
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Rollers")}
//             className="grid-item"
//           >
//             Rollers
//           </div>
//           <div
//             value={selectedVehicle}
//             onClick={() => handleVehicleClick("Trucks")}
//             className="grid-item"
//           >
//             Trucks
//           </div>
//         </div>
//       ) : (
//         <div>
//           <div className="date-picker-wrapper d-flex">
//             <DatePicker
//               selected={selectedDate}
//               onChange={handleDateChange}
//               dateFormat="dd/MM/yyyy"
//               placeholderText="Select a date"
//               className="date-picker"
//               popperPlacement="top-end"
//               minDate={new Date()}
//               utcOffset={330}
//             />
//             {error && (
//               <div className="error-popup">
//                 <p>Please select a date</p>
//               </div>
//             )}
//           </div>

//           <div className="select-container">
//             {[
//               "6AM-7AM",
//               "7AM-8AM",
//               "8AM-9AM",
//               "9AM-10AM",
//               "10AM-11AM",
//               "11AM-12PM",
//               "12PM-1PM",
//               "1PM-2PM",
//               "2PM-3PM",
//               "3PM-4PM",
//               "4PM-5PM",
//               "5PM-6PM",
//               "6PM-7PM",
//               "7PM-8PM",
//               "8PM-9PM",
//               "9PM-10PM",
//               "10PM-11PM",
//               "11PM-12AM",
//             ].map((timeRange, index) => (
//               <div
//                 className="select-item"
//                 key={index}
//                 onClick={() => handleSelectSlot(timeRange)}
//               >
//                 {timeRange}
//               </div>
//             ))}
//             <div
//               type="button"
//               className="select-item1"
//               // onClick={() => handleSelectSlot("Available")}
//             >
//               Available
//             </div>
//             <div
//               type="button"
//               className="select-item1"
//               // className={
//               //   bookedClicked ? "select-item1 booked-clicked" : "select-item1"
//               // }
//               onClick={() => handleSelectSlot("Booked")}
//             >
//               Booked
//             </div>
//           </div>

//           <Modal isOpen={modal} toggle={toggleModal} centered={true}>
//             <ModalHeader toggle={toggleModal}>Slot Details:</ModalHeader>
//             <ModalBody>
//               <form onSubmit={handleSubmit}>
//                 <div className="form-group">
//                   <label htmlFor="input2">Vehicle Name:</label>
//                   <input
//                     type="text"
//                     id="input6"
//                     value={selectedVehicle}
//                     readOnly
//                   />
//                 </div>

//                 <div className="form-group">
//                   <label htmlFor="input1">Slot date (IST):</label>
//                   {/* <input
//                     type="text"
//                     id="input1"
//                     value={
//                       selectedDate
//                         ? new Date(
//                             selectedDate.getTime() + 5.5 * 60 * 60 * 1000
//                           ).toLocaleDateString("en-IN")
//                         : ""
//                     }
//                     readOnly
//                   /> */}
//                   <input
//                     type="text"
//                     id="input1"
//                     value={
//                       selectedDate ? selectedDate.toLocaleString("en-IN") : ""
//                     }
//                     readOnly
//                   />
//                 </div>

//                 <div className="form-group">
//                   <label htmlFor="input2">Slot time:</label>
//                   <input
//                     type="text"
//                     id="input2"
//                     value={selectedSlot}
//                     readOnly
//                   />
//                 </div>
//                 {/* <div className="form-group">
//                   <label htmlFor="input4">Vehicle Number:</label>
//                   <input
//                     type="text"
//                     id="input4"
//                     value={vehicleNumber}
//                     onChange={(e) => setVehicleNumber(e.target.value)}
//                   />
//                 </div> */}
//                  <div>Vehicle Number
//                 <select
//                 className="form-group-input"
//                   id="input4"
//                   value={vehicleNumber}
//                   onChange={handleVehicleNumberChange}
//                 >
//                   <option 
//                   value="">Select Vehicle Number</option>
//                   {vehicleNumbers.map((number) => (
//                     <option key={number} value={number}>
//                       {number}
//                     </option>
//                   ))}
//                 </select>
//                 </div>
                
//                 <div className="form-group">
//                   <label htmlFor="input3">Villa Number:</label>
//                   <input
//                     type="text"
//                     id="input3"
//                     value={villaNumber}
//                     onChange={(e) => setVillaNumber(e.target.value)}
//                   />
//                 </div>
//                 <div className="form-group">
//                   <label htmlFor="input5">Booked By:</label>
//                   <input
//                     type="text"
//                     id="input5"
//                     value={bookedBy}
//                     onChange={(e) => setBookedBy(e.target.value)}
//                   />
//                 </div>
//                 {formError && (
//                   <p className="error">Please fill out all fields.</p>
//                 )}
//                 <div className="float-end m-2">
//                   <Button
//                     color="secondary"
//                     className="m-2"
//                     onClick={handlereset}
//                   >
//                     Reset
//                   </Button>
//                   <Button color="primary" onClick={handleSubmit}>
//                     Submit
//                   </Button>
//                 </div>
//               </form>
//             </ModalBody>
//           </Modal>
//         </div>
//       )}

//       <div className="auth-inner" style={{ width: "auto" }}>
//         <table>
//           <tr>
//             <th>Vehicle Name</th>
//             <th>Date</th>
//             <th>slot time</th>
//             <th>vehicle num</th>
//             <th>villa num</th>
//             <th>Booked by</th>
//           </tr>
//           {data.map((i, index) => {
//             return (
//               <tr key={index}>
//                 <td>{i.selectedVehicle}</td>
//                 <td>{`${i.selectedDate} (${i.submittedAt})`}</td>
//                 <td>{i.selectedSlot}</td>
//                 <td>{i.vehicleNumber}</td>
//                 <td>{i.villaNumber}</td>
//                 <td>{i.bookedBy}</td>
//               </tr>
//             );
//           })}
//         </table>
//       </div>
//     </div>
//   );
// };

// export default AdminBookings;






// admin bookings

import React, { useEffect, useState } from "react";
// import "./adminbookings.css";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { Modal, ModalHeader, ModalBody, ModalFooter, Button } from "reactstrap";
import axios from "axios";

const AdminBookings = () => {
  const [selectedVehicle, setSelectedVehicle] = useState("");
  const [showSelectDate, setShowSelectDate] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [error, setError] = useState(false);
  const [villaNumber, setVillaNumber] = useState("");
  const [vehicleNumber, setVehicleNumber] = useState("");
  const [bookedBy, setBookedBy] = useState("");
  const [formError, setFormError] = useState(false);
  const [modal, setModal] = useState(false);
  const [data, setData] = useState([]);

  const [bookedClicked, setBookedClicked] = useState(false);
  const [bookedSlots, setBookedSlots] = useState([]);

  const [vehicleNumbers, setVehicleNumbers] = useState([]);

  const handleVehicleClick = (selectedVehicle) => {
    setSelectedVehicle(selectedVehicle);
    setShowSelectDate(true);
  };

  const toggleModal = () => setModal(!modal);

  // const handleSelectSlot = (slot) => {
  //   if (selectedDate) {
  //     setSelectedSlot(slot);
  //     toggleModal(); // Show modal
  //     setError(false);
  //   } else {
  //     setError(true);
  //     setTimeout(() => {
  //       setError(false);
  //     }, 2000);
  //   }
  // };

  // const isSlotBooked = (slot, date) => {
  //   return bookedSlots.some((item) => item.slot === slot && item.date === date);
  // };
  // const isSlotBooked = (slot, date) => {
  //   return bookedSlots.some((item) => item.selectedSlot === slot && item.selectedDate === date);
  // };
  const isSlotBooked = (slot, date) => {
    return data.some((item) => {
      // Ensure item.selectedDate is a Date object before calling getTime()
      const itemDate = new Date(item.selectedDate);
      return (
        item.selectedVehicle === selectedVehicle && // Check for selected vehicle
        item.selectedSlot === slot &&
        itemDate.getTime() === date.getTime()
      );
    });
  };

  // imp
  // const handleSelectSlot = (slot) => {
  //   if (selectedDate) {
  //     // Check if the slot is already booked for the selected date
  //     const slotAlreadyBooked = data.some(
  //       (item) => {
  //         // Ensure item.selectedDate is a Date object before calling getTime()
  //         const itemDate = new Date(item.selectedDate);
  //         return item.selectedSlot === slot && itemDate.getTime() === selectedDate.getTime();
  //       }
  //     );

  //     if (slotAlreadyBooked) {
  //       // If the slot is already booked for the selected date
  //       setBookedClicked(true);
  //       setTimeout(() => {
  //         setBookedClicked(false);
  //       }, 2000);
  //     } else {
  //       setSelectedSlot(slot);
  //       toggleModal(); // Show modal
  //       setError(false);
  //     }
  //   } else {
  //     setError(true);
  //     setTimeout(() => {
  //       setError(false);
  //     }, 2000);
  //   }
  // };

  const handleSelectSlot = (slot) => {
    if (selectedDate) {
      // Check if the slot is already booked for the selected date
      const slotAlreadyBooked = data.some((item) => {
        // Ensure item.selectedDate is a Date object before calling getTime()
        const itemDate = new Date(item.selectedDate);
        return (
          item.selectedSlot === slot &&
          itemDate.getTime() === selectedDate.getTime()
        );
      });

      if (slotAlreadyBooked) {
        // If the slot is already booked for the selected date
        setBookedClicked(true);
        setTimeout(() => {
          setBookedClicked(false);
        }, 2000);
      } else {
        setSelectedSlot(slot);
        toggleModal(); // Show modal
        setError(false);
      }
    } else {
      setError(true);
      setTimeout(() => {
        setError(false);
      }, 2000);
    }
  };

  // const handleDateChange = (date) => {
  //   // Convert selected date to IST
  //   const selectedISTDate = new Date(date.getTime() + 5.5 * 60 * 60 * 1000);
  //   setSelectedDate(selectedISTDate);
  // };
  // const handleDateChange = (date) => {
  //   setSelectedDate(date);
  //   setSelectedSlot(null);
  const handleDateChange = (date) => {
    setSelectedDate(date);
    setSelectedSlot(null);
    // Convert selected date to IST
    const selectedISTDate = new Date(date.getTime() + 5.5 * 60 * 60 * 1000);
    setSelectedDate(selectedISTDate);
  };

  const handleCancel = () => {
    toggleModal();
  };

  const handlereset = () => {
    setVillaNumber("");
    setVehicleNumber("");
    setBookedBy("");
    setFormError("");
  };

  // const handleSubmit = (event) => {
  //   event.preventDefault();
  //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
  //     setFormError(true);
  //     return;
  //   }
  //   const data = {
  //     selectedVehicle: selectedVehicle,
  //     selectedDate: selectedDate,
  //     selectedSlot: selectedSlot,
  //     vehicleNumber: vehicleNumber,
  //     villaNumber: villaNumber,
  //     bookedBy: bookedBy,
  //   };

  //   axios
  //     .post("http://localhost:3000/createSlots", data)
  //     .then((response) => {
  //       console.log(response.status);
  //       console.log("Form data submitted successfully:", response.data);
  //       alert("form submitted successfully");
  //       setShowSelectDate(false);
  //     })
  //     .catch((error) => {
  //       console.error("Error submitting form data:", error);
  //     });

  //   toggleModal();

  //   setSelectedDate(null);
  //   setSelectedSlot(null);
  //   setSelectedVehicle("");
  //   setVehicleNumber("");
  //   setVillaNumber("");
  //   setBookedBy("");
  // };

  // const handleSubmit = (event) => {
  //   event.preventDefault();
  //   const currentTime = new Date(); // Capture the current time
  //   const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN"); // Format the current time as per IST
  //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
  //     setFormError(true);
  //     return;
  //   }
  //   const data = {
  //     selectedVehicle: selectedVehicle,
  //     selectedDate: selectedDate,
  //     selectedSlot: selectedSlot,
  //     vehicleNumber: vehicleNumber,
  //     villaNumber: villaNumber,
  //     bookedBy: bookedBy,
  //     submittedAt: formattedCurrentTime, // Add the current time to the data object
  //   };

  //   axios
  //     .post("http://localhost:3000/createSlots", data)
  //     .then((response) => {
  //       console.log(response.status);
  //       console.log("Form data submitted successfully:", response.data);
  //       alert("form submitted successfully");
  //       setShowSelectDate(false);
  //     })
  //     .catch((error) => {
  //       console.error("Error submitting form data:", error);
  //     });

  //   toggleModal();

  //   setSelectedDate(null);
  //   setSelectedSlot(null);
  //   setSelectedVehicle("");
  //   setVehicleNumber("");
  //   setVillaNumber("");
  //   setBookedBy("");
  // };

  // vvimp
  // const handleSubmit = (event) => {
  //   event.preventDefault();
  //   const currentTime = new Date();
  //   const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN");
  //   if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim() || !selectedVehicle) {
  //     setFormError(true);
  //     return;
  //   }
  //   const data = {
  //     selectedVehicle: selectedVehicle,
  //     selectedDate: selectedDate,
  //     selectedSlot: selectedSlot,
  //     vehicleNumber: vehicleNumber,
  //     villaNumber: villaNumber,
  //     bookedBy: bookedBy,
  //     submittedAt: formattedCurrentTime,
  //   };

  //   axios
  //     .post("http://localhost:3000/createSlots", data)
  //     .then((response) => {
  //       console.log(response.status);
  //       console.log("Form data submitted successfully:", response.data);
  //       alert("form submitted successfully");
  //       setShowSelectDate(false);
  //     })
  //     .catch((error) => {
  //       console.error("Error submitting form data:", error);
  //     });

  //   toggleModal();

  //   setSelectedDate(null);
  //   setSelectedSlot(null);
  //   setSelectedVehicle(""); // Make sure to reset selectedVehicle here
  //   setVehicleNumber("");
  //   setVillaNumber("");
  //   setBookedBy("");
  // };

  const handleSubmit = (event) => {
    event.preventDefault();
    const currentTime = new Date();
    const formattedCurrentTime = currentTime.toLocaleTimeString("en-IN");

    // Check if any required field is empty
    // if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim() || !selectedVehicle || !selectedDate || !selectedSlot) {
    //   setFormError(true); // Set formError state to true if any required field is empty
    //   return;
    // }
    if (!villaNumber.trim() || !vehicleNumber.trim() || !bookedBy.trim()) {
      setFormError(true);
      return;
    }
    const data = {
      selectedVehicle: selectedVehicle,
      selectedDate: selectedDate,
      selectedSlot: selectedSlot,
      vehicleNumber: vehicleNumber,
      villaNumber: villaNumber,
      bookedBy: bookedBy,
      submittedAt: formattedCurrentTime,
    };

    axios
      .post("http://localhost:3000/createSlots", data)
      .then((response) => {
        console.log(response.status);
        console.log("Form data submitted successfully:", response.data);
        alert("Form submitted successfully");
        // setShowSelectDate(false);
        console.log(data);
        toggleModal();
        setSelectedDate(null);
        setSelectedSlot(null);
        setSelectedVehicle("");
        setVehicleNumber("");
        setVillaNumber("");
        setBookedBy("");
      })
      .catch((error) => {
        console.error("Error submitting form data:", error);
      });
  };

  useEffect(() => {
    fetch("http://localhost:3000/getslots", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    })
      .then((res) => res.json())
      .then((data) => {
        // console.log(data, "userData");
        setData(data.data);
      });
  }, []);

  //vehiclenum
  // useEffect(() => {
  //   axios.get("http://localhost:3000/getVehicle").then((response) => {
  //     const vehicleNumbers = response.data.map((vehicle) => vehicle.vehicleNum);
  //     setVehicleNumbers(vehicleNumbers);
  //   }).catch((error) => {
  //     console.error("Error fetching vehicle numbers:", error);
  //   });
  // }, []);
  useEffect(() => {
    axios
      .get("http://localhost:3000/vehicles") // Correct endpoint to fetch all vehicle numbers
      .then((response) => {
        const vehicleNumbers = response.data.map(
          (vehicle) => vehicle.vehicleNum
        );
        setVehicleNumbers(vehicleNumbers);
      })
      .catch((error) => {
        console.error("Error fetching vehicle numbers:", error);
      });
  }, []);

  const handleVehicleNumberChange = (event) => {
    setVehicleNumber(event.target.value);
  };


  return (
    <div>
      {!showSelectDate ? (
        <div className="grid-container">
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Tractor")}
            className="grid-item"
          >
            Tractor
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("JCB")}
            className="grid-item"
          >
            JCB
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Concrete Mixer")}
            className="grid-item"
          >
            Concrete Mixer
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Bulldozers")}
            className="grid-item"
          >
            Bulldozers
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Cranes")}
            className="grid-item"
          >
            Cranes
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Rollers")}
            className="grid-item"
          >
            Rollers
          </div>
          <div
            value={selectedVehicle}
            onClick={() => handleVehicleClick("Trucks")}
            className="grid-item"
          >
            Trucks
          </div>
        </div>
      ) : (
        <div>
          <div className="date-picker-wrapper d-flex">
            <DatePicker
              selected={selectedDate}
              onChange={handleDateChange}
              dateFormat="dd/MM/yyyy"
              placeholderText="Select a date"
              className="date-picker"
              popperPlacement="top-end"
              minDate={new Date()}
              utcOffset={330}
            />
            {error && (
              <div className="error-popup">
                <p>Please select a date</p>
              </div>
            )}
          </div>

          <div className="select-container">
            {[
              "6AM-7AM",
              "7AM-8AM",
              "8AM-9AM",
              "9AM-10AM",
              "10AM-11AM",
              "11AM-12PM",
              "12PM-1PM",
              "1PM-2PM",
              "2PM-3PM",
              "3PM-4PM",
              "4PM-5PM",
              "5PM-6PM",
              "6PM-7PM",
              "7PM-8PM",
              "8PM-9PM",
              "9PM-10PM",
              "10PM-11PM",
              "11PM-12AM",
            ].map((timeRange, index) => (
              <div
                className="select-item"
                key={index}
                onClick={() => handleSelectSlot(timeRange)}
              >
                {timeRange}
              </div>
            ))}
            <div
              type="button"
              className="select-item1"
              // onClick={() => handleSelectSlot("Available")}
            >
              Available
            </div>
            <div
              type="button"
              className={
                bookedClicked ? "select-item1 booked-clicked" : "select-item1"
              }
              onClick={() => handleSelectSlot("Booked")}
            >
              Booked
            </div>
          </div>

          <Modal isOpen={modal} toggle={toggleModal} centered={true}>
            <ModalHeader toggle={toggleModal}>Slot Details:</ModalHeader>
            <ModalBody>
              <form onSubmit={handleSubmit}>
                <div className="form-group">
                  <label htmlFor="input2">Vehicle Name:</label>
                  <input
                    type="text"
                    id="input6"
                    value={selectedVehicle}
                    readOnly
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="input1">Slot date (IST):</label>
                  {/* <input
                    type="text"
                    id="input1"
                    value={
                      selectedDate
                        ? new Date(
                            selectedDate.getTime() + 5.5 * 60 * 60 * 1000
                          ).toLocaleDateString("en-IN")
                        : ""
                    }
                    readOnly
                  /> */}
                  <input
                    type="text"
                    id="input1"
                    value={
                      selectedDate ? selectedDate.toLocaleString("en-IN") : ""
                    }
                    readOnly
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="input2">Slot time:</label>
                  <input
                    type="text"
                    id="input2"
                    value={selectedSlot}
                    readOnly
                  />
                </div>
                {/* <div className="form-group">
                  <label htmlFor="input4">Vehicle Number:</label>
                  <input
                    type="text"
                    id="input4"
                    value={vehicleNumber}
                    onChange={(e) => setVehicleNumber(e.target.value)}
                  />
                </div> */}
                 <div>Vehicle Number
                <select
                className="form-group-input"
                  id="input4"
                  value={vehicleNumber}
                  onChange={handleVehicleNumberChange}
                >
                  <option 
                  value="">Select Vehicle Number</option>
                  {vehicleNumbers.map((number) => (
                    <option key={number} value={number}>
                      {number}
                    </option>
                  ))}
                </select>
                </div>
                
                <div className="form-group">
                  <label htmlFor="input3">Villa Number:</label>
                  <input
                    type="text"
                    id="input3"
                    value={villaNumber}
                    onChange={(e) => setVillaNumber(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="input5">Booked By:</label>
                  <input
                    type="text"
                    id="input5"
                    value={bookedBy}
                    onChange={(e) => setBookedBy(e.target.value)}
                  />
                </div>
                {formError && (
                  <p className="error">Please fill out all fields.</p>
                )}
                <div className="float-end m-2">
                  <Button
                    color="secondary"
                    className="m-2"
                    onClick={handlereset}
                  >
                    Reset
                  </Button>
                  <Button color="primary" onClick={handleSubmit}>
                    Submit
                  </Button>
                </div>
              </form>
            </ModalBody>
          </Modal>
        </div>
      )}

      <div className="auth-inner" style={{ width: "auto" }}>
        <table>
          <tr>
            <th>Vehicle Name</th>
            <th>Date</th>
            <th>slot time</th>
            <th>vehicle num</th>
            <th>villa num</th>
            <th>Booked by</th>
          </tr>
          {data.map((i, index) => {
            return (
              <tr key={index}>
                <td>{i.selectedVehicle}</td>
                <td>{`${i.selectedDate} (${i.submittedAt})`}</td>
                <td>{i.selectedSlot}</td>
                <td>{i.vehicleNumber}</td>
                <td>{i.villaNumber}</td>
                <td>{i.bookedBy}</td>
              </tr>
            );
          })}
        </table>
      </div>
    </div>
  );
};

export default AdminBookings;
